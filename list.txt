q)(|/) 10 20 30 40 50
50

q)sum til 10
45

q)max til 10
9

q)min til 10
0


q)2000.01.01 + til 31 / generate a list of 31 days in Jan
2000.01.01 2000.01.02 2000.01.03 2000.01.04 2000.01.05 2000.01.06 2000.01.07 ..

q)2000.01.01 + til 365 / generate a list of all days in the first year 2000
2000.01.01 2000.01.02 2000.01.03 2000.01.04 2000.01.05 2000.01.06 2000.01.07 ..

q)2000.01m + til 12 /generate the 12 months of the millennium
2000.01 2000.02 2000.03 2000.04 2000.05 2000.06 2000.07 2000.08 2000.09 2000...

q)0 +/ 10 20 30 40 50 /we have list of 5 values, initialize to zero and add across the list (accumulate) - this is declarative programming
150

q)(+/) 10 20 30 40 50 /without an initial value and ergo starting with the first value, accumulatively add each element in the list.
150

q)(*/) 1 2 3 4 5
120

q)(*/) 1 + til 5 /generate 5 list elems: 0 1 2 3 4 then add 1 to them all and multiply accumulate.
120

q)2#10 20 30 40 50 /retrieve the first two elements from the front of the lists
10 20 60 100 150

q)2#10 20 30 40 50 /retrieve the first two elements from the front of the lists
10 20 60 100 150

q)/In q = is used for equality while colon is used for assignment

q)buys: 1 2 3 4 5 /create a variable list called buys with 5 elems

q)sums buysed for equality2 to a variable called a.cesive diff across a numeric list
1 3 6 10 15 20 30 40 50 / compute the succesive diff across a numeric list

q)count ("Hi"; "Leon"; "How are you?")
3

q)2*1 2 3      / numeric list with space separators
2 4 6

q)3#1          / generate sequence of same numbers
1 1 1

q)5#1 2        / or from a list of given items
1 2 1 2 1

q)reverse 1 2 3   / reverse
3 2 1

q)1 2 3@1       / indexing is zero-based
2

q)1 2 3@1 0     / index can be vector too
2 1

q)2 4 6?4       / index of given item/s
1

q)1 2 3,10 20         / join lists
1 2 3 10 20

q)sums 1 2 3          / running sum of items
1 3 6

q)(1 2;3 4 6;7 6)     / list
(1 2;3 4 6;7 6)

q)2 3#til 6                     / generate matrix
(0 1 2;3 4 5)

q)1 2 3*/:1 2 3                 / outer product: multiplication table
(1 2 3;2 4 6;3 6 9)

q)(*/) 1 + til 5 /generate 5 list elems: 0 1 2 3 4 then add 1 to them all and multiply accumulate.
120

q)(`one;`two;`three)
`one`two`three

q)(`one;`two;`three),`four
`one`two`three`four

q)1+2*til 10
1 3 5 7 9 11 13 15 17 19

q)42+2*til 10
42 44 46 48 50 52 54 56 58 60

q)5#42
42 42 42 42 42

q)L:5#42
q)L[2] /index the third element
42
q)L[1] /index the second element
42
q)L[0] /index the first element
42

q)0 +/ 1 2 3 4 5
15

q)0 +/ 1+til 10
55
q)1+til 10
1 2 3 4 5 6 7 8 9 10

q)0 +\ 1+til 10
1 3 6 10 15 21 28 36 45 55

We tell q to start with the initial value of 0 in the accumulator and then modify + with the iterator / so that it adds across the list. There is nothing special about built-in operator + – we can use any operator or even our own function.


q)0 {x+y}/ 1 2 3 4 5

q)0 {x+y}/ 1+til 10


q)(+/) 1 2 3 4 5  /we don't really need the flexibility to specify the initial value of the accumulator. It suffices to start with the first item of the list and proceed across the rest of the list.
15
q)(+/) 1+til 10
55
q)(+\) 1+til 10
1 3 6 10 15 21 28 36 45 55


Use | or & with Over and you have maximum or minimum.

q)(|/) 20 10 40 30
40

q)(&/) 20 10 40 30
10
Some applications of / are so common that they have their own names.


q)sum 1+til 10 / this is +/
55
q)max 20 10 40 30 / this is |/
40
q)min 20 10 40 30 / this is &/ 
10

Composing this with */ we get a multiplicative implementation of raising to a power
q)n:5
q)(*/) n#10
100000

q)FO:1 1
q)FO,sum -2#FO
1 1 2
q)FO,sum -2#FO
1 1 2
q)FO
1 1
q)FO:FO,sum -2#FO
q)FO
1 1 2
...
q)FO:FO,sum -2#FO /Fibonacci numbers
q)FO
1 1 2 3 5 8 13 21
q)FO:FO,sum -2#FO
...
q)FO
1 1 2 3 5 8 13 21 34 55 89 144 233

q)1 2 3 + 10 20 30
11 22 33

q)4%2 /divide is % and always returns a float
2f

q)1 2 3 + 10 20 30 /adds two lists together
11 22 33

q)count 10 20 30 /q operator
3

q)1+10 20 30 /adds a single number to the list of three elements
11 21 31

q)10 20 30+1
11 21 31

q)0 1 2 3 4 5 % 2
0 0.5 1 1.5 2 2.5



q) 2*3+4 / = 14 because all operators have th same precedence but are evaluated from right left


q)til 3 /generates a list of numbers up until 3
0 1 2

q)til 100
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ..

q)count til 100
100

q)count til 10000000
10000000

q)til 20
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19

q)1+til 20 /generate the first 20 integers and and one to each one
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

q)2 * til 20
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38

q)1+2*til 20 /generate first 20 oddintegers  by adding one to above
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38

q)1+2*til 20 /generate first 20 oddintegers  by adding one to above
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39

q)1+2*til 10000000
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 5..

q)2000.01.01 + til 365 / generate a list of 365 days from Jan 1st
2000.01.01 2000.01.02 2000.01.03 2000.01.04 2000.01.05 2000.01.06 2000.01.07 ..

q)2000.01m + til 12 /generate the 12 months of the millennium
2000.01 2000.02 2000.03 2000.04 2000.05 2000.06 2000.07 2000.08 2000.09 2000...

q)0 +/ 10 20 30 40 50 /we have list of 5 values, initialize to zero and add across the list (accumulate) - this declarative programming
150

q)(+/) 10 20 30 40 50 /without an initial value and ergo starting with the first value, accumulatively add each element in the list.
150

q)(*/) 1 2 3 4 5
120

q)L:100 200 300 400
q)L
100 200 300 400
q)L[1]+:99 /modify in place extends to lists and indexing.
q)L
100 299 300 400

q)L:1 2 3 /appends to a list in place.
q)L,:4
q)L
1 2 3 4
q)L,:100 200
q)L
1 2 3 4 100 200

Another way to combine two lists of the same length is by coalescing them with ^. The result is given by the rule that the right item prevails over the corresponding left item except when the right item is null.

q)L1:10 0N 30
q)L2:100 200 0N
q)L1^L2
100 200 30

The unary function group takes a list and returns a dictionary in which each distinct item of the argument is mapped to the indices of its occurrences, in order of occurrence.
q)group "i miss mississippi"
i| 0 3 8 11 14 17
 | 1 6
m| 2 7
s| 4 5 9 10 12 13
p| 15 16

The basic form of where returns the indices of 1b in a boolean list – i.e., it reports where the ones are.
q)where 101010b
0 2 4

This is useful to operate at positions that are indentified by a predicate.
q)L:10 20 30 40 50
q)L[where L>20]:42
q)L
10 20 42 42 42

